{
  "address": "0x2e2F7D0de1b6f9029817e57033C5B4b2953449d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "lotteryInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHTrasferred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpenBro",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TrasferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerCount",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "lottery_event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStemp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7f1e0f7d14e6a2d6a60600f974089e182705bfb847283b8165046ec4cf79e50",
  "receipt": {
    "to": null,
    "from": "0x582B08Bc66B376b7825b9fe54a659FA93348a72d",
    "contractAddress": "0x2e2F7D0de1b6f9029817e57033C5B4b2953449d3",
    "transactionIndex": 12,
    "gasUsed": "1222276",
    "logsBloom": "0x
    "blockHash": "0xcd54ee0c3a68a6327c548f89f492116931857fe2dbc50bb831c2024588d61fd0",
    "transactionHash": "0xb7f1e0f7d14e6a2d6a60600f974089e182705bfb847283b8165046ec4cf79e50",
    "logs": [],
    "blockNumber": 3358577,
    "cumulativeGasUsed": "1615125",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1449",
    "500000",
    "30"
  ],
  "numDeployments": 3,
  "solcInputHash": "9307f1bd399fb47064baccbca10232f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lotteryInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHTrasferred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpenBro\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TrasferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerCount\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lottery_event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStemp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Devdeep Shetraniwala (devdeep)\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper will call to check if upkeep is needed.they look for 'upkeepNeeded' to be true if condition match then returns true: 1. time is up interval has passed 2. atleast 1 player with some money 3. subscription is set and funded (chainlink oracle) 4. lottery -> open state\"},\"performUpkeep(bytes)\":{\"details\":\"Called by the Chainlink Keeper to perform work that was scheduled for it.chainlink oracle verifiable random function 2 step process : get num , then decalre winner request random number is converted to performUpkeep !!! ``` function ReqestRandomNum() external { // 1. get random number from chainlink oracle // Will revert if subscription is not set and funded. // Will revert if the subscription is not for the specified job. s_lotteryState = LotteryState.CLOSED; // kind of muation lock thing going on here while calcualting winner lottery will be in closed state uint256 reqeustId = i_vrfCoordinator.requestRandomWords( i_gasLane_keyHash, // gase lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job i_subscriptionId, // subscriptionId REQUEST_CONFIRMATIONS, i_callbackGasLimit, // gas limit for the callback NUM_WORDS // number of random words to return 1 word ); emit RequestLotteryWinner(reqeustId); } ```\"}},\"title\":\"Lottery Contract - Cryptography and Blockchain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is creating untempered lottery system using decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// Note :\\n// Lottery contract\\n\\n// ennter lottery anonymously\\n// pay 0.1 ether to enter\\n// pick a random winner (VRF Chainlink Oracle) verifiable random function\\n// automatic every interval  -> automatic make\\n\\n// random pick -> chainlink oracle -> verifiable random function\\n// automation -> chainlink keepers -> smart contract\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n// Errors -> gas efficient way to revert\\nerror Lottery__NotEnoughETHTrasferred();\\nerror Lottery__TrasferFailed();\\nerror Lottery__NotOpenBro();\\nerror Lottery__UpkeepNotNeeded(\\n    uint256 balance,\\n    uint256 lotteryState,\\n    uint256 playerCount\\n);\\n\\n/**\\n * @title Lottery Contract - Cryptography and Blockchain\\n * @author Devdeep Shetraniwala (devdeep)\\n * @notice This contract is creating untempered lottery system using decentralized smart contract\\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n// Why inhertied because random word funciton interanl virtual so here ovveride and use it\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Enum declaration here\\n    enum LotteryState {\\n        OPEN,\\n        CLOSED\\n    } // enum -> list of values uint256 0 , 1\\n\\n    // State variables\\n    uint256 private immutable i_ticketPrice;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 5; // 5 blocks for confirmation\\n    uint16 private constant NUM_WORDS = 1; // 1 word\\n\\n    // Lottery variables\\n    address private s_lotteryWinner;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastLotteryTime;\\n    uint256 private immutable i_lotteryInterval;\\n\\n    // Events\\n    event lottery_event(address indexed player);\\n    event RequestLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // constructor\\n    constructor(\\n        address vrfCoordinatorV2, // contract address find address as hint remember\\n        uint256 ticketPrice,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 lotteryInterval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_ticketPrice = ticketPrice;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane_keyHash = gasLane; // gas lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job\\n        i_subscriptionId = subscriptionId; // subscriptionId\\n        i_callbackGasLimit = callbackGasLimit; // gas limit for the callback\\n        s_lotteryState = LotteryState.OPEN; // lottery state staring with open\\n        s_lastLotteryTime = block.timestamp; // block.timestamp -> current time\\n        i_lotteryInterval = lotteryInterval; // time interval\\n    }\\n\\n    // Functions\\n    function enter() public payable {\\n        // 1. check if the lottery is open\\n        if (s_lotteryState == LotteryState.CLOSED) {\\n            revert Lottery__NotOpenBro();\\n        }\\n\\n        // 2. check if the player has sent enough eth\\n        if (msg.value < i_ticketPrice) {\\n            revert Lottery__NotEnoughETHTrasferred();\\n        }\\n\\n        // 3. add the player to the players array\\n        s_players.push(payable(msg.sender));\\n        // event when we update the state\\n        // listner -> event -> update UI\\n        // EVM = Ethereum Virtual Machine\\n        // smart contract can't access get\\n        emit lottery_event(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper will call to check if upkeep is needed.\\n     * @dev they look for 'upkeepNeeded' to be true\\n     * if condition match then returns true:\\n     * 1. time is up interval has passed\\n     * 2. atleast 1 player with some money\\n     * 3. subscription is set and funded (chainlink oracle)\\n     * 4. lottery -> open state\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (s_lotteryState == LotteryState.OPEN);\\n        bool enoughPlayers = (getPlayerCount() > 0);\\n        bool enoughTime = ((block.timestamp - s_lastLotteryTime) >\\n            i_lotteryInterval);\\n        bool balance = (address(this).balance > 0); // our contract has balance or not\\n        upkeepNeeded = (isOpen && enoughPlayers && enoughTime && balance);\\n    }\\n\\n    /**\\n     * @dev Called by the Chainlink Keeper to perform work that was scheduled for it.\\n       @dev\\n    chainlink oracle\\n    verifiable random function\\n    2 step process : get num , then decalre winner\\n\\n    request random number is converted to performUpkeep !!!\\n    ```\\n    function ReqestRandomNum() external {\\n        // 1. get random number from chainlink oracle\\n        // Will revert if subscription is not set and funded.\\n        // Will revert if the subscription is not for the specified job.\\n\\n        s_lotteryState = LotteryState.CLOSED; // kind of muation lock thing going on here while calcualting winner lottery will be in closed state\\n        uint256 reqeustId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane_keyHash, // gase lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job\\n            i_subscriptionId, // subscriptionId\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit, // gas limit for the callback\\n            NUM_WORDS // number of random words to return 1 word\\n        );\\n\\n        emit RequestLotteryWinner(reqeustId);\\n    }\\n    ```\\n*/\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        // validate if the upkeep is needed\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                uint256(s_lotteryState),\\n                getPlayerCount()\\n            );\\n        }\\n        s_lotteryState = LotteryState.CLOSED; // kind of muation lock thing going on here while calcualting winner lottery will be in closed state\\n        uint256 reqeustId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane_keyHash, // gase lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job\\n            i_subscriptionId, // subscriptionId\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit, // gas limit for the callback\\n            NUM_WORDS // number of random words to return 1 word\\n        );\\n\\n        emit RequestLotteryWinner(reqeustId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // modulo to get the winner\\n        uint256 winnerIndex = randomWords[0] % getPlayerCount();\\n        address payable winner = s_players[winnerIndex]; // recent winner or getPlayer(winnerIndex)\\n        s_lotteryWinner = winner; // gloabl winner to show on UI\\n        s_players = new address payable[](0); // reset the players array\\n        s_lotteryState = LotteryState.OPEN; // open the lottery again\\n        s_lastLotteryTime = block.timestamp; // update the last lottery time\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\"); // send all the money to the winner\\n        if (!success) {\\n            revert Lottery__TrasferFailed();\\n        }\\n        emit WinnerPicked(winner); // to get a history of winners using events\\n    }\\n\\n    // Pure fuction to get the state variables\\n    function getTicketPrice() public view returns (uint256) {\\n        return i_ticketPrice;\\n    }\\n\\n    function getPlayerCount() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getWinnerAddress() public view returns (address) {\\n        return s_lotteryWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    // note pure not view why ? because its constant so direct return\\n    function getNumWord() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getLastTimeStemp() public view returns (uint256) {\\n        return s_lastLotteryTime;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint16) {\\n        return REQUEST_CONFIRMATIONS; // number of confirmations to wait for before calling the callback\\n    }\\n\\n    function getLotteryInterval() public view returns (uint256) {\\n        return i_lotteryInterval;\\n    }\\n}\\n\",\"keccak256\":\"0x60550153b69b02562636c63ec633f2430e113e73150b78748f9e19498df8a629\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200185738038062001857833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611488620003cf600039600081816105e001526106740152600061052301526000610500015260006104df015260006104a30152600081816106d601526107c8015260008181610322015261037601526114886000f3fe6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c2e5220611610059578063c2e5220614610259578063ca7eaad114610284578063e55ae4e8146102af578063e97dcb62146102ec576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806387bb7ae01461022e576100c2565b806310a37c26146100c75780631fe543e3146100f25780633d30cd461461011b5780634585e33b146101465780634f11d8441461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610be4565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610da2565b610320565b005b34801561012757600080fd5b506101306103e0565b60405161013d9190610e0d565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e83565b6103ea565b005b34801561017b57600080fd5b506101846105dc565b6040516101919190610e0d565b60405180910390f35b3480156101a657600080fd5b506101af610604565b6040516101bc9190610eed565b60405180910390f35b3480156101d157600080fd5b506101da61060d565b6040516101e79190610f7f565b60405180910390f35b3480156101fc57600080fd5b506102176004803603810190610212919061104f565b610624565b604051610225929190611132565b60405180910390f35b34801561023a57600080fd5b506102436106d2565b6040516102509190610e0d565b60405180910390f35b34801561026557600080fd5b5061026e6106fa565b60405161027b9190610e0d565b60405180910390f35b34801561029057600080fd5b50610299610706565b6040516102a69190610e0d565b60405180910390f35b3480156102bb57600080fd5b506102d660048036038101906102d19190611162565b610713565b6040516102e39190610be4565b60405180910390f35b6102f461075a565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c992919061118f565b60405180910390fd5b6103dc82826108c8565b5050565b6000600254905090565b600061040460405180602001604052806000815250610624565b509050806104755747600160149054906101000a900460ff16600181111561042f5761042e610f08565b5b6104376106fa565b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161046c939291906111b8565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049a57610499610f08565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060057f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610564959493929190611285565b6020604051808303816000875af1158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a791906112ed565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006005905090565b6000600160149054906101000a900460ff16905090565b60006060600080600181111561063d5761063c610f08565b5b600160149054906101000a900460ff16600181111561065f5761065e610f08565b5b14905060008061066d6106fa565b11905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106a19190611349565b119050600080471190508380156106b55750825b80156106be5750815b80156106c75750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000600161ffff16905090565b60008082815481106107285761072761137d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60018081111561076d5761076c610f08565b5b600160149054906101000a900460ff16600181111561078f5761078e610f08565b5b036107c6576040517fba9eba8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610820576040517f97c2a0e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fd76cbacdf23f8adab0835ad3fdf40407955b90dd88198044b98ed5bcecdc794a60405160405180910390a2565b60006108d26106fa565b826000815181106108e6576108e561137d565b5b60200260200101516108f891906113db565b9050600080828154811061090f5761090e61137d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561099857610997610c5f565b5b6040519080825280602002602001820160405280156109c65781602001602082028036833780820191505090505b50600090805190602001906109dc929190610afc565b506000600160146101000a81548160ff02191690836001811115610a0357610a02610f08565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a359061143d565b60006040518083038185875af1925050503d8060008114610a72576040519150601f19603f3d011682016040523d82523d6000602084013e610a77565b606091505b5050905080610ab2576040517f282d650800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b75579160200282015b82811115610b745782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1c565b5b509050610b829190610b86565b5090565b5b80821115610b9f576000816000905550600101610b87565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bce82610ba3565b9050919050565b610bde81610bc3565b82525050565b6000602082019050610bf96000830184610bd5565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c2681610c13565b8114610c3157600080fd5b50565b600081359050610c4381610c1d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9782610c4e565b810181811067ffffffffffffffff82111715610cb657610cb5610c5f565b5b80604052505050565b6000610cc9610bff565b9050610cd58282610c8e565b919050565b600067ffffffffffffffff821115610cf557610cf4610c5f565b5b602082029050602081019050919050565b600080fd5b6000610d1e610d1984610cda565b610cbf565b90508083825260208201905060208402830185811115610d4157610d40610d06565b5b835b81811015610d6a5780610d568882610c34565b845260208401935050602081019050610d43565b5050509392505050565b600082601f830112610d8957610d88610c49565b5b8135610d99848260208601610d0b565b91505092915050565b60008060408385031215610db957610db8610c09565b5b6000610dc785828601610c34565b925050602083013567ffffffffffffffff811115610de857610de7610c0e565b5b610df485828601610d74565b9150509250929050565b610e0781610c13565b82525050565b6000602082019050610e226000830184610dfe565b92915050565b600080fd5b60008083601f840112610e4357610e42610c49565b5b8235905067ffffffffffffffff811115610e6057610e5f610e28565b5b602083019150836001820283011115610e7c57610e7b610d06565b5b9250929050565b60008060208385031215610e9a57610e99610c09565b5b600083013567ffffffffffffffff811115610eb857610eb7610c0e565b5b610ec485828601610e2d565b92509250509250929050565b600061ffff82169050919050565b610ee781610ed0565b82525050565b6000602082019050610f026000830184610ede565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f4857610f47610f08565b5b50565b6000819050610f5982610f37565b919050565b6000610f6982610f4b565b9050919050565b610f7981610f5e565b82525050565b6000602082019050610f946000830184610f70565b92915050565b600080fd5b600067ffffffffffffffff821115610fba57610fb9610c5f565b5b610fc382610c4e565b9050602081019050919050565b82818337600083830152505050565b6000610ff2610fed84610f9f565b610cbf565b90508281526020810184848401111561100e5761100d610f9a565b5b611019848285610fd0565b509392505050565b600082601f83011261103657611035610c49565b5b8135611046848260208601610fdf565b91505092915050565b60006020828403121561106557611064610c09565b5b600082013567ffffffffffffffff81111561108357611082610c0e565b5b61108f84828501611021565b91505092915050565b60008115159050919050565b6110ad81611098565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ed5780820151818401526020810190506110d2565b60008484015250505050565b6000611104826110b3565b61110e81856110be565b935061111e8185602086016110cf565b61112781610c4e565b840191505092915050565b600060408201905061114760008301856110a4565b818103602083015261115981846110f9565b90509392505050565b60006020828403121561117857611177610c09565b5b600061118684828501610c34565b91505092915050565b60006040820190506111a46000830185610bd5565b6111b16020830184610bd5565b9392505050565b60006060820190506111cd6000830186610dfe565b6111da6020830185610dfe565b6111e76040830184610dfe565b949350505050565b6000819050919050565b611202816111ef565b82525050565b600067ffffffffffffffff82169050919050565b61122581611208565b82525050565b600063ffffffff82169050919050565b6112448161122b565b82525050565b6000819050919050565b600061126f61126a61126584610ed0565b61124a565b61122b565b9050919050565b61127f81611254565b82525050565b600060a08201905061129a60008301886111f9565b6112a7602083018761121c565b6112b46040830186610ede565b6112c1606083018561123b565b6112ce6080830184611276565b9695505050505050565b6000815190506112e781610c1d565b92915050565b60006020828403121561130357611302610c09565b5b6000611311848285016112d8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135482610c13565b915061135f83610c13565b92508282039050818111156113775761137661131a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113e682610c13565b91506113f183610c13565b925082611401576114006113ac565b5b828206905092915050565b600081905092915050565b50565b600061142760008361140c565b915061143282611417565b600082019050919050565b60006114488261141a565b915081905091905056fea2646970667358221220c5cb199e6e3ccc05ccde7ed57b519be7540fcd2a5196314fb3ce54ae7d1d38c764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c2e5220611610059578063c2e5220614610259578063ca7eaad114610284578063e55ae4e8146102af578063e97dcb62146102ec576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806387bb7ae01461022e576100c2565b806310a37c26146100c75780631fe543e3146100f25780633d30cd461461011b5780634585e33b146101465780634f11d8441461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610be4565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610da2565b610320565b005b34801561012757600080fd5b506101306103e0565b60405161013d9190610e0d565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e83565b6103ea565b005b34801561017b57600080fd5b506101846105dc565b6040516101919190610e0d565b60405180910390f35b3480156101a657600080fd5b506101af610604565b6040516101bc9190610eed565b60405180910390f35b3480156101d157600080fd5b506101da61060d565b6040516101e79190610f7f565b60405180910390f35b3480156101fc57600080fd5b506102176004803603810190610212919061104f565b610624565b604051610225929190611132565b60405180910390f35b34801561023a57600080fd5b506102436106d2565b6040516102509190610e0d565b60405180910390f35b34801561026557600080fd5b5061026e6106fa565b60405161027b9190610e0d565b60405180910390f35b34801561029057600080fd5b50610299610706565b6040516102a69190610e0d565b60405180910390f35b3480156102bb57600080fd5b506102d660048036038101906102d19190611162565b610713565b6040516102e39190610be4565b60405180910390f35b6102f461075a565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c992919061118f565b60405180910390fd5b6103dc82826108c8565b5050565b6000600254905090565b600061040460405180602001604052806000815250610624565b509050806104755747600160149054906101000a900460ff16600181111561042f5761042e610f08565b5b6104376106fa565b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161046c939291906111b8565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049a57610499610f08565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060057f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610564959493929190611285565b6020604051808303816000875af1158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a791906112ed565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006005905090565b6000600160149054906101000a900460ff16905090565b60006060600080600181111561063d5761063c610f08565b5b600160149054906101000a900460ff16600181111561065f5761065e610f08565b5b14905060008061066d6106fa565b11905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106a19190611349565b119050600080471190508380156106b55750825b80156106be5750815b80156106c75750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000600161ffff16905090565b60008082815481106107285761072761137d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60018081111561076d5761076c610f08565b5b600160149054906101000a900460ff16600181111561078f5761078e610f08565b5b036107c6576040517fba9eba8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610820576040517f97c2a0e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fd76cbacdf23f8adab0835ad3fdf40407955b90dd88198044b98ed5bcecdc794a60405160405180910390a2565b60006108d26106fa565b826000815181106108e6576108e561137d565b5b60200260200101516108f891906113db565b9050600080828154811061090f5761090e61137d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561099857610997610c5f565b5b6040519080825280602002602001820160405280156109c65781602001602082028036833780820191505090505b50600090805190602001906109dc929190610afc565b506000600160146101000a81548160ff02191690836001811115610a0357610a02610f08565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a359061143d565b60006040518083038185875af1925050503d8060008114610a72576040519150601f19603f3d011682016040523d82523d6000602084013e610a77565b606091505b5050905080610ab2576040517f282d650800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b75579160200282015b82811115610b745782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1c565b5b509050610b829190610b86565b5090565b5b80821115610b9f576000816000905550600101610b87565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bce82610ba3565b9050919050565b610bde81610bc3565b82525050565b6000602082019050610bf96000830184610bd5565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c2681610c13565b8114610c3157600080fd5b50565b600081359050610c4381610c1d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9782610c4e565b810181811067ffffffffffffffff82111715610cb657610cb5610c5f565b5b80604052505050565b6000610cc9610bff565b9050610cd58282610c8e565b919050565b600067ffffffffffffffff821115610cf557610cf4610c5f565b5b602082029050602081019050919050565b600080fd5b6000610d1e610d1984610cda565b610cbf565b90508083825260208201905060208402830185811115610d4157610d40610d06565b5b835b81811015610d6a5780610d568882610c34565b845260208401935050602081019050610d43565b5050509392505050565b600082601f830112610d8957610d88610c49565b5b8135610d99848260208601610d0b565b91505092915050565b60008060408385031215610db957610db8610c09565b5b6000610dc785828601610c34565b925050602083013567ffffffffffffffff811115610de857610de7610c0e565b5b610df485828601610d74565b9150509250929050565b610e0781610c13565b82525050565b6000602082019050610e226000830184610dfe565b92915050565b600080fd5b60008083601f840112610e4357610e42610c49565b5b8235905067ffffffffffffffff811115610e6057610e5f610e28565b5b602083019150836001820283011115610e7c57610e7b610d06565b5b9250929050565b60008060208385031215610e9a57610e99610c09565b5b600083013567ffffffffffffffff811115610eb857610eb7610c0e565b5b610ec485828601610e2d565b92509250509250929050565b600061ffff82169050919050565b610ee781610ed0565b82525050565b6000602082019050610f026000830184610ede565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f4857610f47610f08565b5b50565b6000819050610f5982610f37565b919050565b6000610f6982610f4b565b9050919050565b610f7981610f5e565b82525050565b6000602082019050610f946000830184610f70565b92915050565b600080fd5b600067ffffffffffffffff821115610fba57610fb9610c5f565b5b610fc382610c4e565b9050602081019050919050565b82818337600083830152505050565b6000610ff2610fed84610f9f565b610cbf565b90508281526020810184848401111561100e5761100d610f9a565b5b611019848285610fd0565b509392505050565b600082601f83011261103657611035610c49565b5b8135611046848260208601610fdf565b91505092915050565b60006020828403121561106557611064610c09565b5b600082013567ffffffffffffffff81111561108357611082610c0e565b5b61108f84828501611021565b91505092915050565b60008115159050919050565b6110ad81611098565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ed5780820151818401526020810190506110d2565b60008484015250505050565b6000611104826110b3565b61110e81856110be565b935061111e8185602086016110cf565b61112781610c4e565b840191505092915050565b600060408201905061114760008301856110a4565b818103602083015261115981846110f9565b90509392505050565b60006020828403121561117857611177610c09565b5b600061118684828501610c34565b91505092915050565b60006040820190506111a46000830185610bd5565b6111b16020830184610bd5565b9392505050565b60006060820190506111cd6000830186610dfe565b6111da6020830185610dfe565b6111e76040830184610dfe565b949350505050565b6000819050919050565b611202816111ef565b82525050565b600067ffffffffffffffff82169050919050565b61122581611208565b82525050565b600063ffffffff82169050919050565b6112448161122b565b82525050565b6000819050919050565b600061126f61126a61126584610ed0565b61124a565b61122b565b9050919050565b61127f81611254565b82525050565b600060a08201905061129a60008301886111f9565b6112a7602083018761121c565b6112b46040830186610ede565b6112c1606083018561123b565b6112ce6080830184611276565b9695505050505050565b6000815190506112e781610c1d565b92915050565b60006020828403121561130357611302610c09565b5b6000611311848285016112d8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135482610c13565b915061135f83610c13565b92508282039050818111156113775761137661131a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113e682610c13565b91506113f183610c13565b925082611401576114006113ac565b5b828206905092915050565b600081905092915050565b50565b600061142760008361140c565b915061143282611417565b600082019050919050565b60006114488261141a565b915081905091905056fea2646970667358221220c5cb199e6e3ccc05ccde7ed57b519be7540fcd2a5196314fb3ce54ae7d1d38c764736f6c63430008120033",
  "devdoc": {
    "author": "Devdeep Shetraniwala (devdeep)",
    "details": "This implements Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper will call to check if upkeep is needed.they look for 'upkeepNeeded' to be true if condition match then returns true: 1. time is up interval has passed 2. atleast 1 player with some money 3. subscription is set and funded (chainlink oracle) 4. lottery -> open state"
      },
      "performUpkeep(bytes)": {
        "details": "Called by the Chainlink Keeper to perform work that was scheduled for it.chainlink oracle verifiable random function 2 step process : get num , then decalre winner request random number is converted to performUpkeep !!! ``` function ReqestRandomNum() external { // 1. get random number from chainlink oracle // Will revert if subscription is not set and funded. // Will revert if the subscription is not for the specified job. s_lotteryState = LotteryState.CLOSED; // kind of muation lock thing going on here while calcualting winner lottery will be in closed state uint256 reqeustId = i_vrfCoordinator.requestRandomWords( i_gasLane_keyHash, // gase lane keyHash -> max gas price willing to pay for a requeist in wei : ID for off -chain VRF job i_subscriptionId, // subscriptionId REQUEST_CONFIRMATIONS, i_callbackGasLimit, // gas limit for the callback NUM_WORDS // number of random words to return 1 word ); emit RequestLotteryWinner(reqeustId); } ```"
      }
    },
    "title": "Lottery Contract - Cryptography and Blockchain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is creating untempered lottery system using decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1162,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1179,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1182,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)1157"
      },
      {
        "astId": 1184,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastLotteryTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1157": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}